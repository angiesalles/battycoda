# Generated by Django 5.1.7 on 2025-04-01 22:01

from django.db import migrations

def create_default_segmentation_algorithms(apps, schema_editor):
    """
    Create default segmentation algorithms for the application.
    """
    SegmentationAlgorithm = apps.get_model('battycoda_app', 'SegmentationAlgorithm')
    
    # Create threshold-based algorithm
    SegmentationAlgorithm.objects.create(
        name="Threshold-based Detector",
        description="Detects calls by taking the absolute value of the audio signal, smoothing it, and applying a threshold based on signal statistics. Good for clear recordings with distinct calls.",
        algorithm_type="threshold",
        celery_task="battycoda_app.audio.task_modules.segmentation_tasks.auto_segment_recording_task",
        is_active=True,
        default_min_duration_ms=10,
        default_smooth_window=3,
        default_threshold_factor=0.5
    )
    
    # Create energy-based algorithm
    SegmentationAlgorithm.objects.create(
        name="Energy-based Detector",
        description="Analyzes the short-time energy of the signal to detect calls, with better performance in noisy recordings. Calculates signal energy in small time windows for more precise detection.",
        algorithm_type="energy",
        celery_task="battycoda_app.audio.task_modules.segmentation_tasks.auto_segment_recording_task",
        is_active=True,
        default_min_duration_ms=8,
        default_smooth_window=5,
        default_threshold_factor=0.4
    )

def create_default_classifiers(apps, schema_editor):
    """
    Create default classifiers for the application.
    """
    Classifier = apps.get_model('battycoda_app', 'Classifier')
    
    # Create the R-direct classifier
    Classifier.objects.create(
        name="R-direct Classifier",
        description="Uses R to process audio segments and classify bat calls based on spectral features.",
        response_format="full_probability",
        celery_task="battycoda_app.audio.task_modules.detection_tasks.run_call_detection",
        service_url="http://r-server:8000",
        endpoint="/classify",
        is_active=True
    )
    
    # Create the dummy classifier
    Classifier.objects.create(
        name="Dummy Classifier",
        description="A simple classifier that assigns equal probability to all call types. Used for testing and demo purposes.",
        response_format="full_probability",
        celery_task="battycoda_app.audio.task_modules.detection_tasks.run_dummy_classifier",
        is_active=True
    )

def create_system_species(apps, schema_editor):
    """
    Create system-wide species (Eptesicus fuscus and Carollia perspicillata)
    that are available to all users and cannot be modified.
    """
    import os
    from django.core.files import File
    
    Species = apps.get_model('battycoda_app', 'Species')
    Call = apps.get_model('battycoda_app', 'Call')
    User = apps.get_model('auth', 'User')
    
    # Get admin user or first user
    admin_user = User.objects.filter(is_superuser=True).first() or User.objects.first()
    
    # Eptesicus fuscus with its call types
    efuscus = Species.objects.create(
        name="Eptesicus fuscus",
        description="Eptesicus fuscus (big brown bat) is a species found across North America. Their calls range from frequency-modulated sweeps to quasi-constant frequency calls.",
        created_by=admin_user,  # Set created_by to avoid issues with image upload path
        group=None,
        is_system=True
    )
    
    # Add image for Eptesicus fuscus
    image_path = "/app/data/species_images/Efuscus.jpg"
    if os.path.exists(image_path):
        with open(image_path, "rb") as img_file:
            efuscus.image.save("Efuscus.jpg", File(img_file), save=True)
    
    # Call types for Eptesicus fuscus (extracted from Efuscus.txt)
    efuscus_calls = [
        ("LsDFM-LFM", "long shallow frequency modulation downwardâ€”long frequency modulation"),
        ("LFM", "long frequency modulation"),
        ("Echo", "echolocation call"),
        ("LQCF-CS", "long quasi-constant frequency to chevron shape"),
        ("U", "U-shaped call"),
        ("LDFM", "long downward frequency modulation long"),
        ("sHFM", "single humped frequency modulation"),
        ("QCF", "quasi-constant frequency"),
        ("QFC-DFM", "quasi-constant frequency to downward frequency modulation"),
        ("UFM", "upward frequency modulation"),
        ("CS", "chevron shaped call"),
        ("DFM", "downward frequency modulation"),
        ("FMB", "frequency modulated bout"),
        ("U-LDFM", "U-shaped call long downward frequency modulation long"),
        ("SFM", "short frequency modulation")
    ]
    
    for short_name, long_name in efuscus_calls:
        Call.objects.create(species=efuscus, short_name=short_name, long_name=long_name)
    
    # Carollia perspicillata with its call types
    carollia = Species.objects.create(
        name="Carollia perspicillata",
        description="Carollia perspicillata (short-tailed leaf-nosed bat) is a fruit-eating bat found in Central and South America. Their calls include various types such as aggressive warbles, distress calls, and echolocation.",
        created_by=admin_user,  # Set created_by to avoid issues with image upload path
        group=None,
        is_system=True
    )
    
    # Add image for Carollia perspicillata
    image_path = "/app/data/species_images/Carollia.png"
    if os.path.exists(image_path):
        with open(image_path, "rb") as img_file:
            carollia.image.save("Carollia.png", File(img_file), save=True)
    
    # Call types for Carollia perspicillata (extracted from Carollia.txt)
    carollia_calls = [
        ("aggressive down-sweeps", "A"),
        ("aggressive warbles", ""),
        ("male aggressive trills", ""),
        ("distress calls", ""),
        ("benign wobbles", ""),
        ("male courtship trills", ""),
        ("pup isolation calls", ""),
        ("echolocation calls", ""),
        ("V-shaped calls", ""),
        ("flat down-sweeps", ""),
        ("hooks", ""),
        ("noise", "")
    ]
    
    for short_name, long_name in carollia_calls:
        Call.objects.create(species=carollia, short_name=short_name, long_name=long_name if long_name else None)

class Migration(migrations.Migration):
    dependencies = [
        ('battycoda_app', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_default_segmentation_algorithms),
        migrations.RunPython(create_default_classifiers),
        migrations.RunPython(create_system_species),
    ]