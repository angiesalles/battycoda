# Generated by Django 5.1.7 on 2025-04-01 22:00

import battycoda_app.models.organization
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Call",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("short_name", models.CharField(max_length=50)),
                ("long_name", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["short_name"],
            },
        ),
        migrations.CreateModel(
            name="Classifier",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="Name of the classification algorithm", max_length=255)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of how the algorithm works", null=True),
                ),
                (
                    "response_format",
                    models.CharField(
                        choices=[
                            ("full_probability", "Full Probability Distribution"),
                            ("highest_only", "Highest Probability Only"),
                        ],
                        help_text="Format of the response returned by this algorithm",
                        max_length=20,
                    ),
                ),
                (
                    "celery_task",
                    models.CharField(
                        default="battycoda_app.audio.task_modules.detection_tasks.run_call_detection",
                        help_text="Fully qualified Celery task name to execute this algorithm",
                        max_length=255,
                    ),
                ),
                (
                    "service_url",
                    models.CharField(
                        blank=True, help_text="URL of the external service, if applicable", max_length=255, null=True
                    ),
                ),
                (
                    "endpoint",
                    models.CharField(blank=True, help_text="Endpoint path for the service", max_length=255, null=True),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Whether this classifier is currently active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "model_file",
                    models.CharField(
                        blank=True, help_text="Path to the model file for custom trained classifiers", max_length=512, null=True
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this classifier",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_classifiers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DetectionResult",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["segment__onset"],
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="CallProbability",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("probability", models.FloatField(help_text="Probability value between 0-1")),
                (
                    "call",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="probabilities",
                        to="battycoda_app.call",
                    ),
                ),
                (
                    "detection_result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="probabilities",
                        to="battycoda_app.detectionresult",
                    ),
                ),
            ],
            options={
                "ordering": ["-probability"],
            },
        ),
        migrations.CreateModel(
            name="DetectionRun",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "algorithm_type",
                    models.CharField(
                        choices=[
                            ("full_probability", "Full Probability Distribution"),
                            ("highest_only", "Highest Probability Only"),
                        ],
                        default="highest_only",
                        help_text="Whether the algorithm returns full probability distributions or only the highest probability",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("progress", models.FloatField(default=0.0, help_text="Progress percentage from 0-100")),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "classifier",
                    models.ForeignKey(
                        blank=True,
                        help_text="The classifier algorithm used for this detection run",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="detection_runs",
                        to="battycoda_app.classifier",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="detection_runs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="detection_runs",
                        to="battycoda_app.group",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="detectionresult",
            name="detection_run",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="results", to="battycoda_app.detectionrun"
            ),
        ),
        migrations.AddField(
            model_name="classifier",
            name="group",
            field=models.ForeignKey(
                blank=True,
                help_text="Group that owns this classifier. If null, it's available to all groups",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="classifiers",
                to="battycoda_app.group",
            ),
        ),
        migrations.CreateModel(
            name="GroupInvitation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("email", models.EmailField(max_length=254)),
                ("token", models.CharField(help_text="Unique token for invitation link", max_length=255, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("accepted", models.BooleanField(default=False)),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invitations",
                        to="battycoda_app.group",
                    ),
                ),
                (
                    "invited_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LoginCode",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code", models.CharField(max_length=10, unique=True)),
                ("token", models.CharField(max_length=64, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("used", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="login_codes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.CharField(max_length=64, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("used", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_reset_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projects",
                        to="battycoda_app.group",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "unique_together": {("name", "group")},
            },
        ),
        migrations.CreateModel(
            name="Recording",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="Name of the recording", max_length=255)),
                ("description", models.TextField(blank=True, help_text="Description of the recording", null=True)),
                ("wav_file", models.FileField(help_text="WAV file for the recording", upload_to="recordings/")),
                (
                    "duration",
                    models.FloatField(blank=True, help_text="Duration of the recording in seconds", null=True),
                ),
                (
                    "sample_rate",
                    models.IntegerField(blank=True, help_text="Sample rate of the recording in Hz", null=True),
                ),
                (
                    "recorded_date",
                    models.DateField(blank=True, help_text="Date when the recording was made", null=True),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Location where the recording was made", max_length=255, null=True
                    ),
                ),
                (
                    "equipment",
                    models.CharField(blank=True, help_text="Equipment used for recording", max_length=255, null=True),
                ),
                (
                    "environmental_conditions",
                    models.TextField(blank=True, help_text="Environmental conditions during recording", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recordings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        help_text="Group that owns this recording",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recordings",
                        to="battycoda_app.group",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        help_text="Project this recording belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recordings",
                        to="battycoda_app.project",
                    ),
                ),
            ],
            options={
                "verbose_name": "Recording",
                "verbose_name_plural": "Recordings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Segment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(blank=True, help_text="Optional name for this segment", max_length=255, null=True),
                ),
                ("onset", models.FloatField(help_text="Start time of the segment in seconds")),
                ("offset", models.FloatField(help_text="End time of the segment in seconds")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True, help_text="Notes about this segment", null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="segments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "recording",
                    models.ForeignKey(
                        help_text="Recording this segment belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="segments",
                        to="battycoda_app.recording",
                    ),
                ),
            ],
            options={
                "ordering": ["onset"],
            },
        ),
        migrations.AddField(
            model_name="detectionresult",
            name="segment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="detection_results",
                to="battycoda_app.segment",
            ),
        ),
        migrations.CreateModel(
            name="Segmentation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        default="Default Segmentation",
                        help_text="Descriptive name for this segmentation run",
                        max_length=255,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this is the currently active segmentation for the recording"
                    ),
                ),
                (
                    "task_id",
                    models.CharField(
                        blank=True, help_text="Celery task ID for automated segmentation", max_length=100, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="completed",
                        max_length=20,
                    ),
                ),
                ("progress", models.FloatField(default=100, help_text="Progress percentage (0-100)")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("min_duration_ms", models.IntegerField(default=10)),
                ("smooth_window", models.IntegerField(default=3)),
                ("threshold_factor", models.FloatField(default=0.5)),
                ("segments_created", models.IntegerField(default=0)),
                (
                    "manually_edited",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this segmentation was manually edited after initial creation",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "recording",
                    models.ForeignKey(
                        help_text="The recording this segmentation belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="segmentations",
                        to="battycoda_app.recording",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="segment",
            name="segmentation",
            field=models.ForeignKey(
                help_text="Segmentation that manages this segment",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="segments",
                to="battycoda_app.segmentation",
            ),
        ),
        migrations.AddField(
            model_name="detectionrun",
            name="segmentation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="detection_runs",
                to="battycoda_app.segmentation",
            ),
        ),
        migrations.CreateModel(
            name="SegmentationAlgorithm",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="Name of the segmentation algorithm", max_length=255)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of how the algorithm works", null=True),
                ),
                (
                    "algorithm_type",
                    models.CharField(
                        choices=[
                            ("threshold", "Threshold-based Detection"),
                            ("energy", "Energy-based Detection"),
                            ("ml", "Machine Learning Detection"),
                            ("external", "External Service"),
                        ],
                        default="threshold",
                        help_text="Type of segmentation algorithm",
                        max_length=20,
                    ),
                ),
                (
                    "celery_task",
                    models.CharField(
                        default="battycoda_app.audio.task_modules.segmentation_tasks.auto_segment_recording_task",
                        help_text="Fully qualified Celery task name to execute this algorithm",
                        max_length=255,
                    ),
                ),
                (
                    "service_url",
                    models.CharField(
                        blank=True, help_text="URL of the external service, if applicable", max_length=255, null=True
                    ),
                ),
                (
                    "endpoint",
                    models.CharField(blank=True, help_text="Endpoint path for the service", max_length=255, null=True),
                ),
                (
                    "default_min_duration_ms",
                    models.IntegerField(default=10, help_text="Default minimum duration in milliseconds"),
                ),
                ("default_smooth_window", models.IntegerField(default=3, help_text="Default smoothing window size")),
                (
                    "default_threshold_factor",
                    models.FloatField(default=0.5, help_text="Default threshold factor (0-10)"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Whether this algorithm is currently active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Group that owns this algorithm. If null, it's available to all groups",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="segmentation_algorithms",
                        to="battycoda_app.group",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="segmentation",
            name="algorithm",
            field=models.ForeignKey(
                blank=True,
                help_text="The algorithm used for this segmentation, if any",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="segmentations",
                to="battycoda_app.segmentationalgorithm",
            ),
        ),
        migrations.CreateModel(
            name="Species",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to=battycoda_app.models.organization.get_species_image_path
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_system", models.BooleanField(default=False, help_text="Designates whether this is a system-wide species available to all users")),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE, 
                        related_name="species", 
                        to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="species",
                        to="battycoda_app.group",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Species",
                "ordering": ["name"],
                "unique_together": {("name", "group")},
            },
        ),
        migrations.AddField(
            model_name="recording",
            name="species",
            field=models.ForeignKey(
                help_text="Species associated with this recording",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="recordings",
                to="battycoda_app.species",
            ),
        ),
        migrations.AddField(
            model_name="call",
            name="species",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="calls", to="battycoda_app.species"
            ),
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("wav_file_name", models.CharField(max_length=255)),
                ("onset", models.FloatField(help_text="Start time of the segment in seconds")),
                ("offset", models.FloatField(help_text="End time of the segment in seconds")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("done", "Done"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "is_done",
                    models.BooleanField(
                        default=False, help_text="Indicates that the task has been fully reviewed and labeled"
                    ),
                ),
                ("classification_result", models.CharField(blank=True, max_length=100, null=True)),
                ("confidence", models.FloatField(blank=True, null=True)),
                (
                    "label",
                    models.CharField(
                        blank=True, help_text="Final expert label assigned to this task", max_length=255, null=True
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes or observations about this task", null=True
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="tasks", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="battycoda_app.group",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="tasks", to="battycoda_app.project"
                    ),
                ),
                (
                    "species",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="tasks", to="battycoda_app.species"
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.AddField(
            model_name="segment",
            name="task",
            field=models.OneToOneField(
                blank=True,
                help_text="Task created from this segment, if any",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="source_segment",
                to="battycoda_app.task",
            ),
        ),
        migrations.CreateModel(
            name="TaskBatch",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("wav_file_name", models.CharField(max_length=255)),
                ("wav_file", models.FileField(blank=True, null=True, upload_to="task_batches/")),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_batches",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "detection_run",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="task_batches",
                        to="battycoda_app.detectionrun",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_batches",
                        to="battycoda_app.group",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_batches",
                        to="battycoda_app.project",
                    ),
                ),
                (
                    "species",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_batches",
                        to="battycoda_app.species",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "unique_together": {("name", "group")},
            },
        ),
        migrations.AddField(
            model_name="task",
            name="batch",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tasks",
                to="battycoda_app.taskbatch",
            ),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_admin",
                    models.BooleanField(
                        default=False, help_text="Designates whether this user is an administrator of their group"
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("default", "Default Green"),
                            ("blue-sky", "Blue Sky"),
                            ("little-fox", "Little Fox"),
                            ("night-city", "Night City"),
                            ("orange-juice", "Orange Juice"),
                            ("passion", "Passion"),
                            ("pink-love", "Pink Love"),
                        ],
                        default="default",
                        help_text="Color theme preference",
                        max_length=20,
                    ),
                ),
                (
                    "cloudflare_id",
                    models.CharField(
                        blank=True, help_text="Deprecated - kept for data compatibility", max_length=255, null=True
                    ),
                ),
                (
                    "is_cloudflare_user",
                    models.BooleanField(default=False, help_text="Deprecated - kept for data compatibility"),
                ),
                (
                    "cloudflare_email",
                    models.EmailField(
                        blank=True, help_text="Deprecated - kept for data compatibility", max_length=254, null=True
                    ),
                ),
                (
                    "last_cloudflare_login",
                    models.DateTimeField(blank=True, help_text="Deprecated - kept for data compatibility", null=True),
                ),
                (
                    "profile_image",
                    models.ImageField(blank=True, help_text="Profile image", null=True, upload_to="profile_images/"),
                ),
                (
                    "group",
                    models.ForeignKey(
                        help_text="Every user must belong to a group",
                        null=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="battycoda_app.group",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="profile", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GroupMembership",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_admin", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_memberships",
                        to="battycoda_app.group",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "group")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="call",
            unique_together={("species", "short_name")},
        ),
        migrations.AddField(
            model_name="classifier",
            name="species",
            field=models.ForeignKey(
                blank=True,
                help_text="Species this classifier is trained for. Once set, this cannot be changed.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="classifiers",
                to="battycoda_app.species",
            ),
        ),
        migrations.AddField(
            model_name="classifier",
            name="source_task_batch",
            field=models.ForeignKey(
                blank=True,
                help_text="The task batch that was used to train this classifier",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="derived_classifiers",
                to="battycoda_app.taskbatch",
            ),
        ),
        migrations.CreateModel(
            name="ClassifierTrainingJob",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="Name for this training job", max_length=255)),
                ("description", models.TextField(blank=True, help_text="Description of the training job", null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "response_format",
                    models.CharField(
                        choices=[
                            ("full_probability", "Full Probability Distribution"),
                            ("highest_only", "Highest Probability Only"),
                        ],
                        default="highest_only",
                        help_text="Format of the response returned by this classifier",
                        max_length=20,
                    ),
                ),
                ("parameters", models.JSONField(blank=True, help_text="JSON with training parameters", null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("progress", models.FloatField(default=0.0, help_text="Progress percentage from 0-100")),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "classifier",
                    models.ForeignKey(
                        blank=True,
                        help_text="The classifier created by this training job (set after successful completion)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="training_job",
                        to="battycoda_app.classifier",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_jobs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_jobs",
                        to="battycoda_app.group",
                    ),
                ),
                (
                    "task_batch",
                    models.ForeignKey(
                        help_text="The task batch used for training this classifier",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_jobs",
                        to="battycoda_app.taskbatch",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserNotification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(help_text="Title of the notification", max_length=255)),
                ("message", models.TextField(help_text="Notification message content")),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("segmentation", "Segmentation Notification"),
                            ("classification", "Classification Notification"),
                            ("training", "Classifier Training Notification"),
                            ("system", "System Notification"),
                            ("info", "Information"),
                        ],
                        default="info",
                        help_text="Type of notification",
                        max_length=20,
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        choices=[
                            ("s7-check", "Success"),
                            ("s7-close", "Error"),
                            ("s7-info", "Info"),
                            ("s7-attention", "Warning"),
                            ("s7-bell", "Notification"),
                            ("s7-like", "Like"),
                        ],
                        default="s7-bell",
                        help_text="Icon to display with notification",
                        max_length=20,
                    ),
                ),
                (
                    "link",
                    models.CharField(
                        blank=True, help_text="Optional link to view related content", max_length=512, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_read", models.BooleanField(default=False, help_text="Whether the notification has been read")),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who will receive this notification",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]