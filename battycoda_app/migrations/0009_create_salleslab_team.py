# Generated by Django 5.1.7 on 2025-03-18 15:02

from django.db import migrations


def create_salleslab_team_and_assign_users(apps, schema_editor):
    # Get the Team model
    Team = apps.get_model('battycoda_app', 'Team')
    UserProfile = apps.get_model('battycoda_app', 'UserProfile')
    User = apps.get_model('auth', 'User')
    
    # Create the SallesLab team if it doesn't exist
    salleslab_team, created = Team.objects.get_or_create(
        name='SallesLab',
        defaults={
            'description': 'Default team for all existing users',
        }
    )
    
    # Assign all existing users to the SallesLab team
    # Set the first user as admin
    users = User.objects.all()
    
    # If there are users, set the first one as admin
    if users.exists():
        first_user_profile = UserProfile.objects.get(user=users.first())
        first_user_profile.is_admin = True
        first_user_profile.team = salleslab_team
        first_user_profile.save()
    
    # Assign all other users to the team
    for user in users[1:]:  # Skip the first user who is now admin
        profile = UserProfile.objects.get(user=user)
        profile.team = salleslab_team
        profile.is_admin = False  # Ensure they're not admins
        profile.save()
    
    # Assign all existing Species, Projects, TaskBatches, and Tasks to the SallesLab team
    Species = apps.get_model('battycoda_app', 'Species')
    Project = apps.get_model('battycoda_app', 'Project')
    
    # Update all species
    Species.objects.all().update(team=salleslab_team)
    
    # Update all projects
    Project.objects.all().update(team=salleslab_team)


def reverse_salleslab_team_assignment(apps, schema_editor):
    # Get the models
    UserProfile = apps.get_model('battycoda_app', 'UserProfile')
    Species = apps.get_model('battycoda_app', 'Species')
    Project = apps.get_model('battycoda_app', 'Project')
    
    # Remove team assignments
    UserProfile.objects.all().update(team=None, is_admin=False)
    Species.objects.all().update(team=None)
    Project.objects.all().update(team=None)


class Migration(migrations.Migration):

    dependencies = [
        ('battycoda_app', '0008_species_team_project_team_taskbatch_team_task_team'),
    ]

    operations = [
        migrations.RunPython(create_salleslab_team_and_assign_users, reverse_salleslab_team_assignment),
    ]