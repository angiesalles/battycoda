# Generated by Django 5.1.7 on 2025-07-16 18:38

from django.db import migrations


def remove_duplicate_emails(apps, schema_editor):
    """Remove users with duplicate email addresses, keeping the oldest one."""
    User = apps.get_model('auth', 'User')
    
    # Find duplicate emails
    from django.db.models import Count
    duplicate_emails = User.objects.values('email').annotate(
        count=Count('id')
    ).filter(count__gt=1)
    
    for item in duplicate_emails:
        email = item['email']
        users_with_email = User.objects.filter(email=email).order_by('date_joined')
        
        # Keep the first (oldest) user, delete the rest
        users_to_delete = users_with_email[1:]
        for user in users_to_delete:
            print(f"Deleting duplicate user: {user.username} ({user.email})")
            user.delete()


def reverse_remove_duplicate_emails(apps, schema_editor):
    """This migration cannot be reversed - data loss occurred."""
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("battycoda_app", "0013_auto_20250706_2109"),
    ]

    operations = [
        # First, remove duplicate emails
        migrations.RunPython(
            remove_duplicate_emails,
            reverse_remove_duplicate_emails,
        ),
        # Then add unique constraint (with transaction commit to handle PostgreSQL trigger events)
        migrations.RunSQL(
            """
            COMMIT;
            BEGIN;
            ALTER TABLE auth_user ADD CONSTRAINT unique_email UNIQUE (email);
            """,
            reverse_sql="ALTER TABLE auth_user DROP CONSTRAINT IF EXISTS unique_email;"
        ),
    ]
