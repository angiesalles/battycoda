# coding: utf-8

"""
    BattyCoda API

    API for BattyCoda - Animal Call Analysis Platform

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.status_enum import StatusEnum
from openapi_client.models.task_batch import TaskBatch
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Serializer for Task model.
    """ # noqa: E501
    id: StrictInt
    batch: TaskBatch
    status: Optional[StatusEnum] = None
    onset: Union[StrictFloat, StrictInt] = Field(description="Start time of the segment in seconds")
    offset: Union[StrictFloat, StrictInt] = Field(description="End time of the segment in seconds")
    label: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Final expert label assigned to this task")
    notes: Optional[StrictStr] = Field(default=None, description="Additional notes or observations about this task")
    created_at: datetime
    updated_at: datetime
    __properties: ClassVar[List[str]] = ["id", "batch", "status", "onset", "offset", "label", "notes", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "batch",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of batch
        if self.batch:
            _dict['batch'] = self.batch.to_dict()
        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "batch": TaskBatch.from_dict(obj["batch"]) if obj.get("batch") is not None else None,
            "status": obj.get("status"),
            "onset": obj.get("onset"),
            "offset": obj.get("offset"),
            "label": obj.get("label"),
            "notes": obj.get("notes"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


